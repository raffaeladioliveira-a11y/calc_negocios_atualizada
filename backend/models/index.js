const { sequelize } = require('../config/database');

// Fun√ß√£o helper para verificar se √© uma fun√ß√£o ou classe
function initializeModel(ModelDefiner, sequelize) {
    if (typeof ModelDefiner === 'function') {
        try {
            // Tentar como fun√ß√£o primeiro (nossos novos models)
            return ModelDefiner(sequelize);
        } catch (error) {
            // Se falhar, pode ser uma classe ES6
            if (error.message.includes('cannot be invoked without')) {
                return ModelDefiner; // Retornar a classe diretamente
            }
            throw error;
        }
    }
    return ModelDefiner; // Se n√£o for fun√ß√£o, retornar como est√°
}

// Inicializar models apenas os que criamos (ACL)
const models = {};

// Models de ACL (que sabemos que existem)
try {
    const UserModel = require('./User');
    models.User = initializeModel(UserModel, sequelize);
    console.log('‚úÖ Model User carregado');
} catch (error) {
    console.log('‚ö†Ô∏è Model User n√£o encontrado:', error.message);
}

try {
    const RoleModel = require('./Role');
    models.Role = initializeModel(RoleModel, sequelize);
    console.log('‚úÖ Model Role carregado');
} catch (error) {
    console.log('‚ö†Ô∏è Model Role n√£o encontrado:', error.message);
}

try {
    const PermissionModel = require('./Permission');
    models.Permission = initializeModel(PermissionModel, sequelize);
    console.log('‚úÖ Model Permission carregado');
} catch (error) {
    console.log('‚ö†Ô∏è Model Permission n√£o encontrado:', error.message);
}

try {
    const UserRoleModel = require('./UserRole');
    models.UserRole = initializeModel(UserRoleModel, sequelize);
    console.log('‚úÖ Model UserRole carregado');
} catch (error) {
    console.log('‚ö†Ô∏è Model UserRole n√£o encontrado:', error.message);
}

try {
    const RolePermissionModel = require('./RolePermission');
    models.RolePermission = initializeModel(RolePermissionModel, sequelize);
    console.log('‚úÖ Model RolePermission carregado');
} catch (error) {
    console.log('‚ö†Ô∏è Model RolePermission n√£o encontrado:', error.message);
}

// Models existentes (vamos tentar carregar mas n√£o quebrar se n√£o conseguir)
try {
    const ClienteModel = require('./Cliente');
    models.Cliente = ClienteModel; // Assumir que √© classe ES6
    console.log('‚úÖ Model Cliente carregado (classe existente)');
} catch (error) {
    console.log('‚ö†Ô∏è Model Cliente n√£o carregado:', error.message);
}

try {
    const OrcamentoModel = require('./Orcamento');
    models.Orcamento = OrcamentoModel; // Assumir que √© classe ES6
    console.log('‚úÖ Model Orcamento carregado (classe existente)');
} catch (error) {
    console.log('‚ö†Ô∏è Model Orcamento n√£o carregado:', error.message);
}

try {
    const CalcValoresModel = require('./CalcValores');
    models.CalcValores = CalcValoresModel; // Assumir que √© classe ES6
    console.log('‚úÖ Model CalcValores carregado (classe existente)');
} catch (error) {
    console.log('‚ö†Ô∏è Model CalcValores n√£o carregado:', error.message);
}

// Configurar associa√ß√µes apenas para models ACL que t√™m o m√©todo associate
Object.keys(models).forEach(modelName => {
    if (models[modelName] && models[modelName].associate && typeof models[modelName].associate === 'function') {
    try {
        models[modelName].associate(models);
        console.log(`‚úÖ Associa√ß√µes configuradas para ${modelName}`);
    } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao configurar associa√ß√µes para ${modelName}:`, error.message);
    }
}
});

// Exportar models e inst√¢ncia do sequelize
module.exports = {
    sequelize,
    ...models
};

// Log para debug
console.log(`üìö Models dispon√≠veis: ${Object.keys(models).join(', ')}`);